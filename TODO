See below for a list of completed items. Things still in progress:

*) Add per-user timezone support
*) Cache a user-object upon login in memcache
*) Beef up the @logged_in decorator so that it:
   1) checks memcache for a matching session
   2) Logs a user out if their session has expired (or updates it accordingly)
   3) Populates memcache with a user object upon cache miss
*) Add authorization decorators (maybe)
*) Unit testing framework
*) Migrate to using setup.py instead of providing a fixed requirements.txt
*) Scripting via Flask-Script (both shell setup and cron-like jobs)
*) Localization
*) Services API example (XML, maybe protobuf)
*) Add support for insecure and secure cookies
*) Logout = kill session in memcache and the database
*) pgmemcache


Things that are demonstrated well enough (alpha sorted list):

AAA (Access, Authentication, Authorization):
	*) Login (via pl functions)
	*) Logout
	*) Registration

Application:
	*) Integration with other WSGI Middleware's
	*) Modularized development (filesystem layout)
	*) Session management (secure cookie handling)
	*) Static assets management

Database (PostgreSQL):
	*) Database ROLEs and permissions
	*) ORM Layer and examples
	*) PostgreSQL pl functions
	*) PostgreSQL schema

Caching (memcached):
	*) Objects
	*) Views
	*) memoized functions

Development:
	*) Application profiling
	*) Debugging toolbar

ORM (SQLAlchemy):
	*) Use of PostgreSQL functions with SQLAlchemy

Templating (Jinja2):
	*) Template filters
	*) Template layout
